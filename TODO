AdapterTrait
------------

4)
Integration tests for:
- many pipes and piping commands and events in every possible direction
- monitoring systembus with 1 pipe
- monitoring systembus with many pipes
- handler methods with multiple annotations (could be use as input or output handler)
- handler methods with namespace annotations (?possible)
- testing closures

12) Create a crafics/cqrs-php packagist package to fully support the installation with composer. 
Custom repositories like github can only be defined in the root package, 
see http://getcomposer.org/doc/04-schema.md#repositories. 
That means, I cannot declare crafics/cqrs-php in my zf2-cqrs-module as dependency, until the consumer of 
my ZF2 module defines the repository link to crafics/cqrs-php in it's composer.json. This makes thinks complicated.

DONE: https://packagist.org/packages/crafics/cqrs-php

13)
Add Handling of Queries: work in progress

14)
Split BusInterface into: 
    - BusInterface: getName(), setGate(), getGate()
    - CommandBusInterface: setCommandHandlerLoader(), mapCommand(), getCommandHandlerMap(), invokeCommand()
    - EventBusInterface: setEventListenerLoader(), registerEvent(), getEventListenerMap(), publishEvent()
    - QueryBusInterface: setQueryHandlerLoader(), mapQuery(), getQueryHandlerMap(), executeQuery()

Provide Traits for all 4 Types.

The AbstractBus implements all 4 interfaces and uses all 4 Traits to provide a simple setup with only one bus extending the AbstractBus.
If you want to work with specific buses, f.e. a seperate QueryBus you only need to implement BusInterface, QueryBusInterface and use BusTrait and QueryBusTrait.

What do you think?

17)
Add Query Annotation

18)
Find a solution to decouple system bus setup from hardcoded dependency to ClassMapLoaders

20)
Implement ConventionAdapter

21)
Add Iteration7 - Multiple buses

22)
Add Iteration8 - ConventionAdapter


23)
Find an own vendor name, to manage all parts under one name

Suggestions:
Malocher -> german word for worker, is available on github, sounds ok: Malocher Frameowrk, Malocher/cqrs or we give each part
part/library the name of a mechanical art like Malocher/Schmied = Malocher/cqrs, Malocher/Maler = Malocher/ddd, ... 

24)
Add generic query object (like IQueryable) and single ViewRepository to simplify ReadModel

_______________________________________________________________________________________________

19)
Check, implement and test handling of transactions:
When and how should a transaction be started?
If a transaction fails, no Events should be published!

After thinking and reading about cqrs transaction handling more in detail, I suggest we don't integrate a transaction hanlding in
the cqrs library. If atomic commands or any other kind of transaction is needed, you could implement a special TransactionBus or something
like this to fit your needs. We can provide examples, that work with normal RDBMS transactions, Unit of Works, etc. to show
ways of how you achive transactional consistency or eventual consistency.


Brainstorming (outdated, it is only here as reminder):

- new Methods in BusInterface: activateEventQueue(); deactivateEventQueue(); queueEvent(EventInterface $event); dequeueEvents(); dropEvents();
- CQRS-Transactions are handled via Gate: beginTransaction(); roleback(); commit();
- when beginTransaction() is called, Gate loops over each registered Bus and call activateEventQueue(), excluding the system-bus
- if the eventQueue of a Bus is active, the bus must queue each published event, if not the bus can publish the evnet like now
- if commit() is called, the Gate loops over each registered Bus and call dequeueEvents(), first now the events are realy published to the Listeners
- if roleback() is callled, the Gate loops over each registered Bus and call dropEvents(), no Event is published to a listener
- in both cases (commit and roleback), the Gate calls deactivateEventQueue() on each Bus
- the system bus is excluded from the transaction behavior, cause we want to monitor each event, also if a roleback is triggered and
  if you want to work with an event store, it should get the possibility to store the events during transaction
- Gate can work with 2 phase commits and you can configure which bus should dequeue it's events in which phase. With this implementation you can
  handle following scenario:
    You use a RDBMS and also make use of database transactions. This infrastructure is out of scope for cqrs, but you must combine it.
    Write your own TransactionManager, that starts both transactions, the database and the cqrs transaction.
    Make use of two cqrs buses, an internal and an external one.
    Configure the gate to dequeue the internal bus in phase 1 and the external bus in phase 2.
    Invoke a Command on the internal bus to change a domain state.
    Publish Event on the internal bus and on the external bus.
    Then commit your cqrs command transaction by only call $gate->commit(Gate::COMMIT_PHASE_1);
    Now a repository should write the state change to database, by listening on the event on the internal bus.
    If everything works as espected, continue by invoking next command and repeat the previous steps.
    If your Unit of Work is done, call commit on the TransactionManager, so that it calls commit on the RDBMS and on the 
    cqrs gate. Calling a normal commit on the cqrs gate includes the phase 2 and so all events are dequeued on the external bus and
    published for external consumers
    

- it could also be implemented through gate with systembus and
  those MetaCommands and Events ... say EventExecutedEvent fails
  somehow (via exception or false) it rolls back the commands
  from the queue in reverse order starting from the failing event



