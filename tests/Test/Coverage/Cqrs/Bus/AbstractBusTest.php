<?php
/*
 * This file is part of the Cqrs package.
 * (c) Manfred Weber <manfred.weber@gmail.com> and Alexander Miertsch <kontakt@codeliner.ws>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Cqrs\Bus;

use Test\TestCase;
use Test\Coverage\Mock;
use Test\Coverage\Mock\Bus\BusMock;
use Test\Coverage\Mock\Event\MockEvent;
use Test\Coverage\Mock\Event\MockEventListener;
use Test\Coverage\Mock\Event\MockEventListenerLoader;
use Test\Coverage\Mock\Command\MockCommand;
use Test\Coverage\Mock\Event\InvokableEventListener;

use Cqrs\Gate;
use Cqrs\Command\ClassMapCommandHandlerLoader;
use Cqrs\Gate\GateException;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-09-16 at 23:33:58.
 */
class AbstractBusTest extends TestCase
{

    /**
     * @var AbstractBus
     */
    protected $bus;
    
    /**
     *
     * @var Mock\Event\MockEventListenerLoader 
     */
    protected $mockEventListenerLoader;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $classMapCommandHandlerLoader = new ClassMapCommandHandlerLoader();
        $this->mockEventListenerLoader = new MockEventListenerLoader();
        $this->mockEventListenerLoader->setMockEventListener(new MockEventListener());
        $this->bus = new BusMock($classMapCommandHandlerLoader, $this->mockEventListenerLoader);
        try {
            Gate::getInstance()->attach($this->bus);
        } catch( GateException $e){
            echo $e->getMessage();
        }
    }

    /**
     * @covers Cqrs\Bus\AbstractBus::invokeCommand
     */
    public function testInvokeCommand__withCommandHandlerDefinition()
    {
        $this->bus->mapCommand(
            'Test\Coverage\Mock\Command\MockCommand',
            array(
                'alias' => 'Test\Coverage\Mock\Command\MockCommandHandler',
                'method' => 'handleCommand'
            )
        );
        
        $mockCommand = new MockCommand();
        
        Gate::getInstance()->getBus('mock-bus')->invokeCommand($mockCommand);
        
        //The MockCommandHandler should call $mockCommand->edit(), otherwise
        //$mockCommand->isEdited() returns false
        $this->assertTrue($mockCommand->isEdited());
    }
    
    /**
     * @covers Cqrs\Bus\AbstractBus::invokeCommand
     */
    public function testInvokeCommand__withCallableCommandHandler()
    {
        $this->bus->mapCommand(
            'Test\Coverage\Mock\Command\MockCommand',
            function($command, $gate) {
                $command->edit();
            }
        );
        
        $mockCommand = new MockCommand();
        
        Gate::getInstance()->getBus('mock-bus')->invokeCommand($mockCommand);
        
        //The MockCommandHandler should call $mockCommand->edit(), otherwise
        //$mockCommand->isEdited() returns false
        $this->assertTrue($mockCommand->isEdited());
    }

    /**
     * @covers Cqrs\Bus\AbstractBus::dispatchEvent
     */
    public function testPublishEvent__withEventListenerDefinition()
    {
        $this->bus->registerEventListener(
            'Test\Coverage\Mock\Event\MockEvent',
            array(
                'alias' => 'mock_event_listener',
                'method' => 'onMock'
            )
        );
        
        $mockEvent = new MockEvent(array('message' => 'it works'));
        
        $this->bus->publishEvent($mockEvent);
        
        $this->assertEquals(
            'it works', 
            $this->mockEventListenerLoader->getEventListener('mock_event_listener')->getMockEventMessage()
        );
    }

    public function testPublishEvent__withInvokableEventListener() {
        $invokableEventListener = new InvokableEventListener();
        
        $this->bus->registerEventListener('Test\Coverage\Mock\Event\MockEvent', $invokableEventListener);
        
        $mockEvent = new MockEvent(array('message' => 'it works'));
        
        $this->bus->publishEvent($mockEvent);
        
        $this->assertEquals(
            'it works', 
            $invokableEventListener->getMockEventMessage()
        );
    }
}
